% Define grid size
a = 100; % number of rows (height)
b = 100; % number of columns (width)

% Create an occupancy map object
map = occupancyMap(b, a); % Note: width first, then height
[x, y] = meshgrid(1:b, 1:a);
% Set all initial occupancies to 0 (optional, as it's already initialized to 0)
for r = 1:a
    for c = 1:b
        setOccupancy(map, [c, r], 0); % Explicitly set to free space
    end
end


% Define triangle vertices (row, column format)
triangleVertices = [30, 40;   % Vertex 1 (y1, x1)
                    50, 70;   % Vertex 2 (y2, x2)
                    70, 40];  % Vertex 3 (y3, x3)

% Fill in the triangle area
for r = 1:a
    for c = 1:b
        if isPointInTriangle(r, c, triangleVertices)
            setOccupancy(map, [c, r], 1); % Mark as occupied
        end
    end
end

% Function to check if a point is inside a triangle
function inside = isPointInTriangle(px, py, vertices)
    % Extract triangle vertices
    v1 = vertices(1, :);
    v2 = vertices(2, :);
    v3 = vertices(3, :);

    % Compute area of the triangle
    areaOrig = triangleArea(v1, v2, v3);

    % Compute areas of sub-triangles
    area1 = triangleArea([px, py], v2, v3);
    area2 = triangleArea(v1, [px, py], v3);
    area3 = triangleArea(v1, v2, [px, py]);

    % A point is inside the triangle if the sum of the areas equals the original area
    inside = (area1 + area2 + area3) == areaOrig;
end

% Function to calculate the area of a triangle given its vertices
function area = triangleArea(v1, v2, v3)
    area = abs((v1(1)*(v2(2)-v3(2)) + v2(1)*(v3(2)-v1(2)) + v3(1)*(v1(2)-v2(2))) / 2);
end

% Display the occupancy map
figure;
show(map);
title('Occupancy Map with Triangular Obstacle');
